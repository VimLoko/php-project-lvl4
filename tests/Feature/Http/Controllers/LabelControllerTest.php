<?php

namespace Tests\Feature\Http\Controllers;

use App\Http\Middleware\VerifyCsrfToken;
use App\Models\Label;
use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;


class LabelControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutMiddleware(VerifyCsrfToken::class);
        DB::beginTransaction();
    }

    public function test_label_index(): void
    {
        $response = $this->get(route('labels.index'));
        $response->assertOk();
    }

    public function test_create_without_autorize()
    {
        $response = $this->get(route('labels.create'));
        $response->assertStatus(302);
        $response->assertRedirect(route('login'));
        $this->assertGuest();
    }

    public function test_create_with_autorize()
    {
        $user = User::factory()->create();
        $response = $this->actingAs($user)
            ->get(route('labels.create'));
        $this->assertAuthenticatedAs($user);
        $response->assertOk();
    }

    public function test_store_without_autorize()
    {
        $label = Label::factory()->make();
        $response = $this->post(route('labels.store'), $label->toArray());
        $response->assertRedirect(route('login'));
        $response->assertStatus(302);
    }

    public function test_store_with_autorize()
    {
        $user = User::factory()->create();
        $label = Label::factory()->make()->toArray();
        $response = $this->actingAs($user)
            ->post(route('labels.store'), $label);
        $response->assertSessionHasNoErrors();
        $response->assertRedirect(route('labels.index'));
        $response->assertStatus(302);
        $this->assertAuthenticatedAs($user);
        $this->assertDatabaseHas('labels', $label);
    }

    public function test_edit_without_autorize()
    {
        $label = Label::factory()->create();
        $response = $this->get(route('labels.edit', $label));
        $response->assertStatus(302);
        $response->assertRedirect(route('login'));
        $this->assertGuest();
    }

    public function test_edit_with_auth_user()
    {
        $user = User::factory()->create();
        $label = Label::factory()->create();
        $response = $this->actingAs($user)
            ->get(route('labels.edit', $label));
        $this->assertAuthenticatedAs($user);
        $response->assertOk();
    }

    public function test_delete_without_autorize()
    {
        $label = Label::factory()->create();
        $response = $this->delete(route('labels.destroy', $label));
        $response->assertStatus(302);
        $response->assertRedirect(route('login'));
        $this->assertGuest();
    }

    public function test_delete_with_auth_user()
    {
        $user = User::factory()->create();
        $label = Label::factory()->create();
        $response = $this->actingAs($user)
            ->delete(route('labels.destroy', $label));
        $response->assertSessionHasNoErrors();
        $response->assertRedirect(route('labels.index'));
        $response->assertStatus(302);
        $this->assertAuthenticatedAs($user);
        $this->assertDatabaseMissing('labels', $label->toArray());
    }

    public function test_delete_label_if_task_have_this_label()
    {
        $user = User::factory()->create();
        $label = Label::factory()->create();
        $task = Task::factory()->create();
        $task->labels()->attach($label);
        $response = $this->actingAs($user)
            ->delete(route('labels.destroy', $label));
        $response->assertRedirect(route('labels.index'));
        $response->assertStatus(302);
        $this->assertAuthenticatedAs($user);
        $this->assertDatabaseHas('labels', [
            'id' => $label->id
        ]);
    }

    protected function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown();
    }
}
